/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CodeQuestionUpdateRequestAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5952677563055594681L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CodeQuestionUpdateRequestAvroModel\",\"namespace\":\"com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"codeQuestionId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"sagaId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"questionId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"problemStatement\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"maxGrade\",\"type\":\"float\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"isPublic\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"allowImport\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"copyState\",\"type\":{\"type\":\"enum\",\"name\":\"CopyState\",\"symbols\":[\"CREATING\",\"CREATED\",\"UPDATING\",\"UPDATED\",\"DELETING\",\"DELETED\",\"CREATE_PROPAGATING\",\"UPDATE_PROPAGATING\",\"DELETE_PROPAGATING\",\"CREATE_ROLLBACKING\",\"UPDATE_ROLLBACKING\",\"DELETE_ROLLBACKING\",\"DELETE_FAILED\",\"UPDATE_FAILED\",\"CREATE_FAILED\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
  }

  private static final BinaryMessageEncoder<CodeQuestionUpdateRequestAvroModel> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CodeQuestionUpdateRequestAvroModel> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CodeQuestionUpdateRequestAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CodeQuestionUpdateRequestAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CodeQuestionUpdateRequestAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CodeQuestionUpdateRequestAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CodeQuestionUpdateRequestAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CodeQuestionUpdateRequestAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CodeQuestionUpdateRequestAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID id;
  private java.util.UUID codeQuestionId;
  private java.util.UUID sagaId;
  private java.util.UUID questionId;
  private java.lang.String problemStatement;
  private float maxGrade;
  private java.lang.String name;
  private java.lang.Boolean isPublic;
  private java.lang.Boolean allowImport;
  private com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CopyState copyState;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CodeQuestionUpdateRequestAvroModel() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param codeQuestionId The new value for codeQuestionId
   * @param sagaId The new value for sagaId
   * @param questionId The new value for questionId
   * @param problemStatement The new value for problemStatement
   * @param maxGrade The new value for maxGrade
   * @param name The new value for name
   * @param isPublic The new value for isPublic
   * @param allowImport The new value for allowImport
   * @param copyState The new value for copyState
   */
  public CodeQuestionUpdateRequestAvroModel(java.util.UUID id, java.util.UUID codeQuestionId, java.util.UUID sagaId, java.util.UUID questionId, java.lang.String problemStatement, java.lang.Float maxGrade, java.lang.String name, java.lang.Boolean isPublic, java.lang.Boolean allowImport, com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CopyState copyState) {
    this.id = id;
    this.codeQuestionId = codeQuestionId;
    this.sagaId = sagaId;
    this.questionId = questionId;
    this.problemStatement = problemStatement;
    this.maxGrade = maxGrade;
    this.name = name;
    this.isPublic = isPublic;
    this.allowImport = allowImport;
    this.copyState = copyState;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return codeQuestionId;
    case 2: return sagaId;
    case 3: return questionId;
    case 4: return problemStatement;
    case 5: return maxGrade;
    case 6: return name;
    case 7: return isPublic;
    case 8: return allowImport;
    case 9: return copyState;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.util.UUID)value$; break;
    case 1: codeQuestionId = (java.util.UUID)value$; break;
    case 2: sagaId = (java.util.UUID)value$; break;
    case 3: questionId = (java.util.UUID)value$; break;
    case 4: problemStatement = value$ != null ? value$.toString() : null; break;
    case 5: maxGrade = (java.lang.Float)value$; break;
    case 6: name = value$ != null ? value$.toString() : null; break;
    case 7: isPublic = (java.lang.Boolean)value$; break;
    case 8: allowImport = (java.lang.Boolean)value$; break;
    case 9: copyState = (com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CopyState)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.util.UUID getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.util.UUID value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'codeQuestionId' field.
   * @return The value of the 'codeQuestionId' field.
   */
  public java.util.UUID getCodeQuestionId() {
    return codeQuestionId;
  }


  /**
   * Sets the value of the 'codeQuestionId' field.
   * @param value the value to set.
   */
  public void setCodeQuestionId(java.util.UUID value) {
    this.codeQuestionId = value;
  }

  /**
   * Gets the value of the 'sagaId' field.
   * @return The value of the 'sagaId' field.
   */
  public java.util.UUID getSagaId() {
    return sagaId;
  }


  /**
   * Sets the value of the 'sagaId' field.
   * @param value the value to set.
   */
  public void setSagaId(java.util.UUID value) {
    this.sagaId = value;
  }

  /**
   * Gets the value of the 'questionId' field.
   * @return The value of the 'questionId' field.
   */
  public java.util.UUID getQuestionId() {
    return questionId;
  }


  /**
   * Sets the value of the 'questionId' field.
   * @param value the value to set.
   */
  public void setQuestionId(java.util.UUID value) {
    this.questionId = value;
  }

  /**
   * Gets the value of the 'problemStatement' field.
   * @return The value of the 'problemStatement' field.
   */
  public java.lang.String getProblemStatement() {
    return problemStatement;
  }


  /**
   * Sets the value of the 'problemStatement' field.
   * @param value the value to set.
   */
  public void setProblemStatement(java.lang.String value) {
    this.problemStatement = value;
  }

  /**
   * Gets the value of the 'maxGrade' field.
   * @return The value of the 'maxGrade' field.
   */
  public float getMaxGrade() {
    return maxGrade;
  }


  /**
   * Sets the value of the 'maxGrade' field.
   * @param value the value to set.
   */
  public void setMaxGrade(float value) {
    this.maxGrade = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'isPublic' field.
   * @return The value of the 'isPublic' field.
   */
  public java.lang.Boolean getIsPublic() {
    return isPublic;
  }


  /**
   * Sets the value of the 'isPublic' field.
   * @param value the value to set.
   */
  public void setIsPublic(java.lang.Boolean value) {
    this.isPublic = value;
  }

  /**
   * Gets the value of the 'allowImport' field.
   * @return The value of the 'allowImport' field.
   */
  public java.lang.Boolean getAllowImport() {
    return allowImport;
  }


  /**
   * Sets the value of the 'allowImport' field.
   * @param value the value to set.
   */
  public void setAllowImport(java.lang.Boolean value) {
    this.allowImport = value;
  }

  /**
   * Gets the value of the 'copyState' field.
   * @return The value of the 'copyState' field.
   */
  public com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CopyState getCopyState() {
    return copyState;
  }


  /**
   * Sets the value of the 'copyState' field.
   * @param value the value to set.
   */
  public void setCopyState(com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CopyState value) {
    this.copyState = value;
  }

  /**
   * Creates a new CodeQuestionUpdateRequestAvroModel RecordBuilder.
   * @return A new CodeQuestionUpdateRequestAvroModel RecordBuilder
   */
  public static com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder newBuilder() {
    return new com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder();
  }

  /**
   * Creates a new CodeQuestionUpdateRequestAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CodeQuestionUpdateRequestAvroModel RecordBuilder
   */
  public static com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder newBuilder(com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder other) {
    if (other == null) {
      return new com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder();
    } else {
      return new com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new CodeQuestionUpdateRequestAvroModel RecordBuilder by copying an existing CodeQuestionUpdateRequestAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new CodeQuestionUpdateRequestAvroModel RecordBuilder
   */
  public static com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder newBuilder(com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel other) {
    if (other == null) {
      return new com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder();
    } else {
      return new com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for CodeQuestionUpdateRequestAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CodeQuestionUpdateRequestAvroModel>
    implements org.apache.avro.data.RecordBuilder<CodeQuestionUpdateRequestAvroModel> {

    private java.util.UUID id;
    private java.util.UUID codeQuestionId;
    private java.util.UUID sagaId;
    private java.util.UUID questionId;
    private java.lang.String problemStatement;
    private float maxGrade;
    private java.lang.String name;
    private java.lang.Boolean isPublic;
    private java.lang.Boolean allowImport;
    private com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CopyState copyState;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.codeQuestionId)) {
        this.codeQuestionId = data().deepCopy(fields()[1].schema(), other.codeQuestionId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.sagaId)) {
        this.sagaId = data().deepCopy(fields()[2].schema(), other.sagaId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.questionId)) {
        this.questionId = data().deepCopy(fields()[3].schema(), other.questionId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.problemStatement)) {
        this.problemStatement = data().deepCopy(fields()[4].schema(), other.problemStatement);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.maxGrade)) {
        this.maxGrade = data().deepCopy(fields()[5].schema(), other.maxGrade);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.name)) {
        this.name = data().deepCopy(fields()[6].schema(), other.name);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.isPublic)) {
        this.isPublic = data().deepCopy(fields()[7].schema(), other.isPublic);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.allowImport)) {
        this.allowImport = data().deepCopy(fields()[8].schema(), other.allowImport);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.copyState)) {
        this.copyState = data().deepCopy(fields()[9].schema(), other.copyState);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing CodeQuestionUpdateRequestAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.codeQuestionId)) {
        this.codeQuestionId = data().deepCopy(fields()[1].schema(), other.codeQuestionId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sagaId)) {
        this.sagaId = data().deepCopy(fields()[2].schema(), other.sagaId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.questionId)) {
        this.questionId = data().deepCopy(fields()[3].schema(), other.questionId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.problemStatement)) {
        this.problemStatement = data().deepCopy(fields()[4].schema(), other.problemStatement);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.maxGrade)) {
        this.maxGrade = data().deepCopy(fields()[5].schema(), other.maxGrade);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.name)) {
        this.name = data().deepCopy(fields()[6].schema(), other.name);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.isPublic)) {
        this.isPublic = data().deepCopy(fields()[7].schema(), other.isPublic);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.allowImport)) {
        this.allowImport = data().deepCopy(fields()[8].schema(), other.allowImport);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.copyState)) {
        this.copyState = data().deepCopy(fields()[9].schema(), other.copyState);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.util.UUID getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder setId(java.util.UUID value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'codeQuestionId' field.
      * @return The value.
      */
    public java.util.UUID getCodeQuestionId() {
      return codeQuestionId;
    }


    /**
      * Sets the value of the 'codeQuestionId' field.
      * @param value The value of 'codeQuestionId'.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder setCodeQuestionId(java.util.UUID value) {
      validate(fields()[1], value);
      this.codeQuestionId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'codeQuestionId' field has been set.
      * @return True if the 'codeQuestionId' field has been set, false otherwise.
      */
    public boolean hasCodeQuestionId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'codeQuestionId' field.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder clearCodeQuestionId() {
      codeQuestionId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sagaId' field.
      * @return The value.
      */
    public java.util.UUID getSagaId() {
      return sagaId;
    }


    /**
      * Sets the value of the 'sagaId' field.
      * @param value The value of 'sagaId'.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder setSagaId(java.util.UUID value) {
      validate(fields()[2], value);
      this.sagaId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sagaId' field has been set.
      * @return True if the 'sagaId' field has been set, false otherwise.
      */
    public boolean hasSagaId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sagaId' field.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder clearSagaId() {
      sagaId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'questionId' field.
      * @return The value.
      */
    public java.util.UUID getQuestionId() {
      return questionId;
    }


    /**
      * Sets the value of the 'questionId' field.
      * @param value The value of 'questionId'.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder setQuestionId(java.util.UUID value) {
      validate(fields()[3], value);
      this.questionId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'questionId' field has been set.
      * @return True if the 'questionId' field has been set, false otherwise.
      */
    public boolean hasQuestionId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'questionId' field.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder clearQuestionId() {
      questionId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'problemStatement' field.
      * @return The value.
      */
    public java.lang.String getProblemStatement() {
      return problemStatement;
    }


    /**
      * Sets the value of the 'problemStatement' field.
      * @param value The value of 'problemStatement'.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder setProblemStatement(java.lang.String value) {
      validate(fields()[4], value);
      this.problemStatement = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'problemStatement' field has been set.
      * @return True if the 'problemStatement' field has been set, false otherwise.
      */
    public boolean hasProblemStatement() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'problemStatement' field.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder clearProblemStatement() {
      problemStatement = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxGrade' field.
      * @return The value.
      */
    public float getMaxGrade() {
      return maxGrade;
    }


    /**
      * Sets the value of the 'maxGrade' field.
      * @param value The value of 'maxGrade'.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder setMaxGrade(float value) {
      validate(fields()[5], value);
      this.maxGrade = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'maxGrade' field has been set.
      * @return True if the 'maxGrade' field has been set, false otherwise.
      */
    public boolean hasMaxGrade() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'maxGrade' field.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder clearMaxGrade() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder setName(java.lang.String value) {
      validate(fields()[6], value);
      this.name = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder clearName() {
      name = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'isPublic' field.
      * @return The value.
      */
    public java.lang.Boolean getIsPublic() {
      return isPublic;
    }


    /**
      * Sets the value of the 'isPublic' field.
      * @param value The value of 'isPublic'.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder setIsPublic(java.lang.Boolean value) {
      validate(fields()[7], value);
      this.isPublic = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'isPublic' field has been set.
      * @return True if the 'isPublic' field has been set, false otherwise.
      */
    public boolean hasIsPublic() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'isPublic' field.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder clearIsPublic() {
      isPublic = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'allowImport' field.
      * @return The value.
      */
    public java.lang.Boolean getAllowImport() {
      return allowImport;
    }


    /**
      * Sets the value of the 'allowImport' field.
      * @param value The value of 'allowImport'.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder setAllowImport(java.lang.Boolean value) {
      validate(fields()[8], value);
      this.allowImport = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'allowImport' field has been set.
      * @return True if the 'allowImport' field has been set, false otherwise.
      */
    public boolean hasAllowImport() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'allowImport' field.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder clearAllowImport() {
      allowImport = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'copyState' field.
      * @return The value.
      */
    public com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CopyState getCopyState() {
      return copyState;
    }


    /**
      * Sets the value of the 'copyState' field.
      * @param value The value of 'copyState'.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder setCopyState(com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CopyState value) {
      validate(fields()[9], value);
      this.copyState = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'copyState' field has been set.
      * @return True if the 'copyState' field has been set, false otherwise.
      */
    public boolean hasCopyState() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'copyState' field.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CodeQuestionUpdateRequestAvroModel.Builder clearCopyState() {
      copyState = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CodeQuestionUpdateRequestAvroModel build() {
      try {
        CodeQuestionUpdateRequestAvroModel record = new CodeQuestionUpdateRequestAvroModel();
        record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
        record.codeQuestionId = fieldSetFlags()[1] ? this.codeQuestionId : (java.util.UUID) defaultValue(fields()[1]);
        record.sagaId = fieldSetFlags()[2] ? this.sagaId : (java.util.UUID) defaultValue(fields()[2]);
        record.questionId = fieldSetFlags()[3] ? this.questionId : (java.util.UUID) defaultValue(fields()[3]);
        record.problemStatement = fieldSetFlags()[4] ? this.problemStatement : (java.lang.String) defaultValue(fields()[4]);
        record.maxGrade = fieldSetFlags()[5] ? this.maxGrade : (java.lang.Float) defaultValue(fields()[5]);
        record.name = fieldSetFlags()[6] ? this.name : (java.lang.String) defaultValue(fields()[6]);
        record.isPublic = fieldSetFlags()[7] ? this.isPublic : (java.lang.Boolean) defaultValue(fields()[7]);
        record.allowImport = fieldSetFlags()[8] ? this.allowImport : (java.lang.Boolean) defaultValue(fields()[8]);
        record.copyState = fieldSetFlags()[9] ? this.copyState : (com.backend.programming.learning.system.kafka.code.assessment.code.question.avro.model.CopyState) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CodeQuestionUpdateRequestAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<CodeQuestionUpdateRequestAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CodeQuestionUpdateRequestAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<CodeQuestionUpdateRequestAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










