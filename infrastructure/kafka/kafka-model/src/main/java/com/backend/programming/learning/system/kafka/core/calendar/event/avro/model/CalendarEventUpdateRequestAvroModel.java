/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.backend.programming.learning.system.kafka.core.calendar.event.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CalendarEventUpdateRequestAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6020078513301100442L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CalendarEventUpdateRequestAvroModel\",\"namespace\":\"com.backend.programming.learning.system.kafka.core.calendar.event.avro.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"sagaId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"courseId\",\"type\":[\"null\",{\"type\":\"string\",\"logicalType\":\"uuid\"}]},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"eventType\",\"type\":{\"type\":\"enum\",\"name\":\"NotificationEventType\",\"symbols\":[\"USER\",\"COURSE\"]}},{\"name\":\"startTime\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"endTime\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"component\",\"type\":{\"type\":\"enum\",\"name\":\"NotificationComponentType\",\"symbols\":[\"ASSIGNMENT\",\"EXAM\",\"POST\",\"CONTEST\",\"REMINDER\"]}},{\"name\":\"updateState\",\"type\":{\"type\":\"enum\",\"name\":\"UpdateState\",\"symbols\":[\"CREATING\",\"CREATED\",\"UPDATING\",\"UPDATED\",\"DELETING\",\"DELETED\",\"DELETE_FAILED\",\"UPDATE_FAILED\",\"CREATE_FAILED\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<CalendarEventUpdateRequestAvroModel> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CalendarEventUpdateRequestAvroModel> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CalendarEventUpdateRequestAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CalendarEventUpdateRequestAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CalendarEventUpdateRequestAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CalendarEventUpdateRequestAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CalendarEventUpdateRequestAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CalendarEventUpdateRequestAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CalendarEventUpdateRequestAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID id;
  private java.util.UUID sagaId;
  private java.util.UUID userId;
  private java.util.UUID courseId;
  private java.lang.String name;
  private java.lang.String description;
  private com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.NotificationEventType eventType;
  private java.time.Instant startTime;
  private java.time.Instant endTime;
  private com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.NotificationComponentType component;
  private com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.UpdateState updateState;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CalendarEventUpdateRequestAvroModel() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param sagaId The new value for sagaId
   * @param userId The new value for userId
   * @param courseId The new value for courseId
   * @param name The new value for name
   * @param description The new value for description
   * @param eventType The new value for eventType
   * @param startTime The new value for startTime
   * @param endTime The new value for endTime
   * @param component The new value for component
   * @param updateState The new value for updateState
   */
  public CalendarEventUpdateRequestAvroModel(java.util.UUID id, java.util.UUID sagaId, java.util.UUID userId, java.util.UUID courseId, java.lang.String name, java.lang.String description, com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.NotificationEventType eventType, java.time.Instant startTime, java.time.Instant endTime, com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.NotificationComponentType component, com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.UpdateState updateState) {
    this.id = id;
    this.sagaId = sagaId;
    this.userId = userId;
    this.courseId = courseId;
    this.name = name;
    this.description = description;
    this.eventType = eventType;
    this.startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.endTime = endTime.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.component = component;
    this.updateState = updateState;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return sagaId;
    case 2: return userId;
    case 3: return courseId;
    case 4: return name;
    case 5: return description;
    case 6: return eventType;
    case 7: return startTime;
    case 8: return endTime;
    case 9: return component;
    case 10: return updateState;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.util.UUID)value$; break;
    case 1: sagaId = (java.util.UUID)value$; break;
    case 2: userId = (java.util.UUID)value$; break;
    case 3: courseId = (java.util.UUID)value$; break;
    case 4: name = value$ != null ? value$.toString() : null; break;
    case 5: description = value$ != null ? value$.toString() : null; break;
    case 6: eventType = (com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.NotificationEventType)value$; break;
    case 7: startTime = (java.time.Instant)value$; break;
    case 8: endTime = (java.time.Instant)value$; break;
    case 9: component = (com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.NotificationComponentType)value$; break;
    case 10: updateState = (com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.UpdateState)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.util.UUID getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.util.UUID value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'sagaId' field.
   * @return The value of the 'sagaId' field.
   */
  public java.util.UUID getSagaId() {
    return sagaId;
  }


  /**
   * Sets the value of the 'sagaId' field.
   * @param value the value to set.
   */
  public void setSagaId(java.util.UUID value) {
    this.sagaId = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.util.UUID getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.util.UUID value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'courseId' field.
   * @return The value of the 'courseId' field.
   */
  public java.util.UUID getCourseId() {
    return courseId;
  }


  /**
   * Sets the value of the 'courseId' field.
   * @param value the value to set.
   */
  public void setCourseId(java.util.UUID value) {
    this.courseId = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.String getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return The value of the 'eventType' field.
   */
  public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.NotificationEventType getEventType() {
    return eventType;
  }


  /**
   * Sets the value of the 'eventType' field.
   * @param value the value to set.
   */
  public void setEventType(com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.NotificationEventType value) {
    this.eventType = value;
  }

  /**
   * Gets the value of the 'startTime' field.
   * @return The value of the 'startTime' field.
   */
  public java.time.Instant getStartTime() {
    return startTime;
  }


  /**
   * Sets the value of the 'startTime' field.
   * @param value the value to set.
   */
  public void setStartTime(java.time.Instant value) {
    this.startTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'endTime' field.
   * @return The value of the 'endTime' field.
   */
  public java.time.Instant getEndTime() {
    return endTime;
  }


  /**
   * Sets the value of the 'endTime' field.
   * @param value the value to set.
   */
  public void setEndTime(java.time.Instant value) {
    this.endTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'component' field.
   * @return The value of the 'component' field.
   */
  public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.NotificationComponentType getComponent() {
    return component;
  }


  /**
   * Sets the value of the 'component' field.
   * @param value the value to set.
   */
  public void setComponent(com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.NotificationComponentType value) {
    this.component = value;
  }

  /**
   * Gets the value of the 'updateState' field.
   * @return The value of the 'updateState' field.
   */
  public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.UpdateState getUpdateState() {
    return updateState;
  }


  /**
   * Sets the value of the 'updateState' field.
   * @param value the value to set.
   */
  public void setUpdateState(com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.UpdateState value) {
    this.updateState = value;
  }

  /**
   * Creates a new CalendarEventUpdateRequestAvroModel RecordBuilder.
   * @return A new CalendarEventUpdateRequestAvroModel RecordBuilder
   */
  public static com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder newBuilder() {
    return new com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder();
  }

  /**
   * Creates a new CalendarEventUpdateRequestAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CalendarEventUpdateRequestAvroModel RecordBuilder
   */
  public static com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder newBuilder(com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder other) {
    if (other == null) {
      return new com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder();
    } else {
      return new com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new CalendarEventUpdateRequestAvroModel RecordBuilder by copying an existing CalendarEventUpdateRequestAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new CalendarEventUpdateRequestAvroModel RecordBuilder
   */
  public static com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder newBuilder(com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel other) {
    if (other == null) {
      return new com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder();
    } else {
      return new com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for CalendarEventUpdateRequestAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CalendarEventUpdateRequestAvroModel>
    implements org.apache.avro.data.RecordBuilder<CalendarEventUpdateRequestAvroModel> {

    private java.util.UUID id;
    private java.util.UUID sagaId;
    private java.util.UUID userId;
    private java.util.UUID courseId;
    private java.lang.String name;
    private java.lang.String description;
    private com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.NotificationEventType eventType;
    private java.time.Instant startTime;
    private java.time.Instant endTime;
    private com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.NotificationComponentType component;
    private com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.UpdateState updateState;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sagaId)) {
        this.sagaId = data().deepCopy(fields()[1].schema(), other.sagaId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.courseId)) {
        this.courseId = data().deepCopy(fields()[3].schema(), other.courseId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.name)) {
        this.name = data().deepCopy(fields()[4].schema(), other.name);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.description)) {
        this.description = data().deepCopy(fields()[5].schema(), other.description);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.eventType)) {
        this.eventType = data().deepCopy(fields()[6].schema(), other.eventType);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.startTime)) {
        this.startTime = data().deepCopy(fields()[7].schema(), other.startTime);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.endTime)) {
        this.endTime = data().deepCopy(fields()[8].schema(), other.endTime);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.component)) {
        this.component = data().deepCopy(fields()[9].schema(), other.component);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.updateState)) {
        this.updateState = data().deepCopy(fields()[10].schema(), other.updateState);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing CalendarEventUpdateRequestAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sagaId)) {
        this.sagaId = data().deepCopy(fields()[1].schema(), other.sagaId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.courseId)) {
        this.courseId = data().deepCopy(fields()[3].schema(), other.courseId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.name)) {
        this.name = data().deepCopy(fields()[4].schema(), other.name);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.description)) {
        this.description = data().deepCopy(fields()[5].schema(), other.description);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.eventType)) {
        this.eventType = data().deepCopy(fields()[6].schema(), other.eventType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.startTime)) {
        this.startTime = data().deepCopy(fields()[7].schema(), other.startTime);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.endTime)) {
        this.endTime = data().deepCopy(fields()[8].schema(), other.endTime);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.component)) {
        this.component = data().deepCopy(fields()[9].schema(), other.component);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.updateState)) {
        this.updateState = data().deepCopy(fields()[10].schema(), other.updateState);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.util.UUID getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder setId(java.util.UUID value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sagaId' field.
      * @return The value.
      */
    public java.util.UUID getSagaId() {
      return sagaId;
    }


    /**
      * Sets the value of the 'sagaId' field.
      * @param value The value of 'sagaId'.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder setSagaId(java.util.UUID value) {
      validate(fields()[1], value);
      this.sagaId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sagaId' field has been set.
      * @return True if the 'sagaId' field has been set, false otherwise.
      */
    public boolean hasSagaId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sagaId' field.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder clearSagaId() {
      sagaId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.util.UUID getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder setUserId(java.util.UUID value) {
      validate(fields()[2], value);
      this.userId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'courseId' field.
      * @return The value.
      */
    public java.util.UUID getCourseId() {
      return courseId;
    }


    /**
      * Sets the value of the 'courseId' field.
      * @param value The value of 'courseId'.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder setCourseId(java.util.UUID value) {
      validate(fields()[3], value);
      this.courseId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'courseId' field has been set.
      * @return True if the 'courseId' field has been set, false otherwise.
      */
    public boolean hasCourseId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'courseId' field.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder clearCourseId() {
      courseId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder setName(java.lang.String value) {
      validate(fields()[4], value);
      this.name = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder clearName() {
      name = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder setDescription(java.lang.String value) {
      validate(fields()[5], value);
      this.description = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder clearDescription() {
      description = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventType' field.
      * @return The value.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.NotificationEventType getEventType() {
      return eventType;
    }


    /**
      * Sets the value of the 'eventType' field.
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder setEventType(com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.NotificationEventType value) {
      validate(fields()[6], value);
      this.eventType = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'eventType' field.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'startTime' field.
      * @return The value.
      */
    public java.time.Instant getStartTime() {
      return startTime;
    }


    /**
      * Sets the value of the 'startTime' field.
      * @param value The value of 'startTime'.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder setStartTime(java.time.Instant value) {
      validate(fields()[7], value);
      this.startTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'startTime' field has been set.
      * @return True if the 'startTime' field has been set, false otherwise.
      */
    public boolean hasStartTime() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'startTime' field.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder clearStartTime() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'endTime' field.
      * @return The value.
      */
    public java.time.Instant getEndTime() {
      return endTime;
    }


    /**
      * Sets the value of the 'endTime' field.
      * @param value The value of 'endTime'.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder setEndTime(java.time.Instant value) {
      validate(fields()[8], value);
      this.endTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'endTime' field has been set.
      * @return True if the 'endTime' field has been set, false otherwise.
      */
    public boolean hasEndTime() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'endTime' field.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder clearEndTime() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'component' field.
      * @return The value.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.NotificationComponentType getComponent() {
      return component;
    }


    /**
      * Sets the value of the 'component' field.
      * @param value The value of 'component'.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder setComponent(com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.NotificationComponentType value) {
      validate(fields()[9], value);
      this.component = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'component' field has been set.
      * @return True if the 'component' field has been set, false otherwise.
      */
    public boolean hasComponent() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'component' field.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder clearComponent() {
      component = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'updateState' field.
      * @return The value.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.UpdateState getUpdateState() {
      return updateState;
    }


    /**
      * Sets the value of the 'updateState' field.
      * @param value The value of 'updateState'.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder setUpdateState(com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.UpdateState value) {
      validate(fields()[10], value);
      this.updateState = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'updateState' field has been set.
      * @return True if the 'updateState' field has been set, false otherwise.
      */
    public boolean hasUpdateState() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'updateState' field.
      * @return This builder.
      */
    public com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.CalendarEventUpdateRequestAvroModel.Builder clearUpdateState() {
      updateState = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CalendarEventUpdateRequestAvroModel build() {
      try {
        CalendarEventUpdateRequestAvroModel record = new CalendarEventUpdateRequestAvroModel();
        record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
        record.sagaId = fieldSetFlags()[1] ? this.sagaId : (java.util.UUID) defaultValue(fields()[1]);
        record.userId = fieldSetFlags()[2] ? this.userId : (java.util.UUID) defaultValue(fields()[2]);
        record.courseId = fieldSetFlags()[3] ? this.courseId : (java.util.UUID) defaultValue(fields()[3]);
        record.name = fieldSetFlags()[4] ? this.name : (java.lang.String) defaultValue(fields()[4]);
        record.description = fieldSetFlags()[5] ? this.description : (java.lang.String) defaultValue(fields()[5]);
        record.eventType = fieldSetFlags()[6] ? this.eventType : (com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.NotificationEventType) defaultValue(fields()[6]);
        record.startTime = fieldSetFlags()[7] ? this.startTime : (java.time.Instant) defaultValue(fields()[7]);
        record.endTime = fieldSetFlags()[8] ? this.endTime : (java.time.Instant) defaultValue(fields()[8]);
        record.component = fieldSetFlags()[9] ? this.component : (com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.NotificationComponentType) defaultValue(fields()[9]);
        record.updateState = fieldSetFlags()[10] ? this.updateState : (com.backend.programming.learning.system.kafka.core.calendar.event.avro.model.UpdateState) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CalendarEventUpdateRequestAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<CalendarEventUpdateRequestAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CalendarEventUpdateRequestAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<CalendarEventUpdateRequestAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










