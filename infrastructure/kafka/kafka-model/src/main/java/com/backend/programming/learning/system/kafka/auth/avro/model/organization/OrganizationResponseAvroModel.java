/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.backend.programming.learning.system.kafka.auth.avro.model.organization;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class OrganizationResponseAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4736081006018162018L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrganizationResponseAvroModel\",\"namespace\":\"com.backend.programming.learning.system.kafka.auth.avro.model.organization\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"sagaId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"organizationId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"organizationResponseStatus\",\"type\":{\"type\":\"enum\",\"name\":\"OrganizationResponseStatus\",\"symbols\":[\"CREATED\",\"CREATE_FAILED\",\"UPDATED\",\"UPDATE_FAILED\",\"DELETED\",\"DELETE_FAILED\"]}},{\"name\":\"failureMessages\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<OrganizationResponseAvroModel> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OrganizationResponseAvroModel> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OrganizationResponseAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OrganizationResponseAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OrganizationResponseAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OrganizationResponseAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OrganizationResponseAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OrganizationResponseAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OrganizationResponseAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private String id;
  private String sagaId;
  private String organizationId;
  private OrganizationResponseStatus organizationResponseStatus;
  private java.util.List<String> failureMessages;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrganizationResponseAvroModel() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param sagaId The new value for sagaId
   * @param organizationId The new value for organizationId
   * @param organizationResponseStatus The new value for organizationResponseStatus
   * @param failureMessages The new value for failureMessages
   */
  public OrganizationResponseAvroModel(String id, String sagaId, String organizationId, OrganizationResponseStatus organizationResponseStatus, java.util.List<String> failureMessages) {
    this.id = id;
    this.sagaId = sagaId;
    this.organizationId = organizationId;
    this.organizationResponseStatus = organizationResponseStatus;
    this.failureMessages = failureMessages;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return sagaId;
    case 2: return organizationId;
    case 3: return organizationResponseStatus;
    case 4: return failureMessages;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: sagaId = value$ != null ? value$.toString() : null; break;
    case 2: organizationId = value$ != null ? value$.toString() : null; break;
    case 3: organizationResponseStatus = (OrganizationResponseStatus)value$; break;
    case 4: failureMessages = (java.util.List<String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'sagaId' field.
   * @return The value of the 'sagaId' field.
   */
  public String getSagaId() {
    return sagaId;
  }


  /**
   * Sets the value of the 'sagaId' field.
   * @param value the value to set.
   */
  public void setSagaId(String value) {
    this.sagaId = value;
  }

  /**
   * Gets the value of the 'organizationId' field.
   * @return The value of the 'organizationId' field.
   */
  public String getOrganizationId() {
    return organizationId;
  }


  /**
   * Sets the value of the 'organizationId' field.
   * @param value the value to set.
   */
  public void setOrganizationId(String value) {
    this.organizationId = value;
  }

  /**
   * Gets the value of the 'organizationResponseStatus' field.
   * @return The value of the 'organizationResponseStatus' field.
   */
  public OrganizationResponseStatus getOrganizationResponseStatus() {
    return organizationResponseStatus;
  }


  /**
   * Sets the value of the 'organizationResponseStatus' field.
   * @param value the value to set.
   */
  public void setOrganizationResponseStatus(OrganizationResponseStatus value) {
    this.organizationResponseStatus = value;
  }

  /**
   * Gets the value of the 'failureMessages' field.
   * @return The value of the 'failureMessages' field.
   */
  public java.util.List<String> getFailureMessages() {
    return failureMessages;
  }


  /**
   * Sets the value of the 'failureMessages' field.
   * @param value the value to set.
   */
  public void setFailureMessages(java.util.List<String> value) {
    this.failureMessages = value;
  }

  /**
   * Creates a new OrganizationResponseAvroModel RecordBuilder.
   * @return A new OrganizationResponseAvroModel RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new OrganizationResponseAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrganizationResponseAvroModel RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new OrganizationResponseAvroModel RecordBuilder by copying an existing OrganizationResponseAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new OrganizationResponseAvroModel RecordBuilder
   */
  public static Builder newBuilder(OrganizationResponseAvroModel other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for OrganizationResponseAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrganizationResponseAvroModel>
    implements org.apache.avro.data.RecordBuilder<OrganizationResponseAvroModel> {

    private String id;
    private String sagaId;
    private String organizationId;
    private OrganizationResponseStatus organizationResponseStatus;
    private java.util.List<String> failureMessages;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sagaId)) {
        this.sagaId = data().deepCopy(fields()[1].schema(), other.sagaId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.organizationId)) {
        this.organizationId = data().deepCopy(fields()[2].schema(), other.organizationId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.organizationResponseStatus)) {
        this.organizationResponseStatus = data().deepCopy(fields()[3].schema(), other.organizationResponseStatus);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.failureMessages)) {
        this.failureMessages = data().deepCopy(fields()[4].schema(), other.failureMessages);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing OrganizationResponseAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(OrganizationResponseAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sagaId)) {
        this.sagaId = data().deepCopy(fields()[1].schema(), other.sagaId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.organizationId)) {
        this.organizationId = data().deepCopy(fields()[2].schema(), other.organizationId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.organizationResponseStatus)) {
        this.organizationResponseStatus = data().deepCopy(fields()[3].schema(), other.organizationResponseStatus);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.failureMessages)) {
        this.failureMessages = data().deepCopy(fields()[4].schema(), other.failureMessages);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public Builder setId(String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sagaId' field.
      * @return The value.
      */
    public String getSagaId() {
      return sagaId;
    }


    /**
      * Sets the value of the 'sagaId' field.
      * @param value The value of 'sagaId'.
      * @return This builder.
      */
    public Builder setSagaId(String value) {
      validate(fields()[1], value);
      this.sagaId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sagaId' field has been set.
      * @return True if the 'sagaId' field has been set, false otherwise.
      */
    public boolean hasSagaId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sagaId' field.
      * @return This builder.
      */
    public Builder clearSagaId() {
      sagaId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'organizationId' field.
      * @return The value.
      */
    public String getOrganizationId() {
      return organizationId;
    }


    /**
      * Sets the value of the 'organizationId' field.
      * @param value The value of 'organizationId'.
      * @return This builder.
      */
    public Builder setOrganizationId(String value) {
      validate(fields()[2], value);
      this.organizationId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'organizationId' field has been set.
      * @return True if the 'organizationId' field has been set, false otherwise.
      */
    public boolean hasOrganizationId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'organizationId' field.
      * @return This builder.
      */
    public Builder clearOrganizationId() {
      organizationId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'organizationResponseStatus' field.
      * @return The value.
      */
    public OrganizationResponseStatus getOrganizationResponseStatus() {
      return organizationResponseStatus;
    }


    /**
      * Sets the value of the 'organizationResponseStatus' field.
      * @param value The value of 'organizationResponseStatus'.
      * @return This builder.
      */
    public Builder setOrganizationResponseStatus(OrganizationResponseStatus value) {
      validate(fields()[3], value);
      this.organizationResponseStatus = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'organizationResponseStatus' field has been set.
      * @return True if the 'organizationResponseStatus' field has been set, false otherwise.
      */
    public boolean hasOrganizationResponseStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'organizationResponseStatus' field.
      * @return This builder.
      */
    public Builder clearOrganizationResponseStatus() {
      organizationResponseStatus = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'failureMessages' field.
      * @return The value.
      */
    public java.util.List<String> getFailureMessages() {
      return failureMessages;
    }


    /**
      * Sets the value of the 'failureMessages' field.
      * @param value The value of 'failureMessages'.
      * @return This builder.
      */
    public Builder setFailureMessages(java.util.List<String> value) {
      validate(fields()[4], value);
      this.failureMessages = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'failureMessages' field has been set.
      * @return True if the 'failureMessages' field has been set, false otherwise.
      */
    public boolean hasFailureMessages() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'failureMessages' field.
      * @return This builder.
      */
    public Builder clearFailureMessages() {
      failureMessages = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OrganizationResponseAvroModel build() {
      try {
        OrganizationResponseAvroModel record = new OrganizationResponseAvroModel();
        record.id = fieldSetFlags()[0] ? this.id : (String) defaultValue(fields()[0]);
        record.sagaId = fieldSetFlags()[1] ? this.sagaId : (String) defaultValue(fields()[1]);
        record.organizationId = fieldSetFlags()[2] ? this.organizationId : (String) defaultValue(fields()[2]);
        record.organizationResponseStatus = fieldSetFlags()[3] ? this.organizationResponseStatus : (OrganizationResponseStatus) defaultValue(fields()[3]);
        record.failureMessages = fieldSetFlags()[4] ? this.failureMessages : (java.util.List<String>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OrganizationResponseAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<OrganizationResponseAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OrganizationResponseAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<OrganizationResponseAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeString(this.sagaId);

    out.writeString(this.organizationId);

    out.writeEnum(this.organizationResponseStatus.ordinal());

    long size0 = this.failureMessages.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (String e0: this.failureMessages) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString();

      this.sagaId = in.readString();

      this.organizationId = in.readString();

      this.organizationResponseStatus = OrganizationResponseStatus.values()[in.readEnum()];

      long size0 = in.readArrayStart();
      java.util.List<String> a0 = this.failureMessages;
      if (a0 == null) {
        a0 = new SpecificData.Array<String>((int)size0, SCHEMA$.getField("failureMessages").schema());
        this.failureMessages = a0;
      } else a0.clear();
      SpecificData.Array<String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<String>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          String e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString();
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString();
          break;

        case 1:
          this.sagaId = in.readString();
          break;

        case 2:
          this.organizationId = in.readString();
          break;

        case 3:
          this.organizationResponseStatus = OrganizationResponseStatus.values()[in.readEnum()];
          break;

        case 4:
          long size0 = in.readArrayStart();
          java.util.List<String> a0 = this.failureMessages;
          if (a0 == null) {
            a0 = new SpecificData.Array<String>((int)size0, SCHEMA$.getField("failureMessages").schema());
            this.failureMessages = a0;
          } else a0.clear();
          SpecificData.Array<String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<String>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              String e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString();
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










